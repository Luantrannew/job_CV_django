import json
from channels.generic.websocket import AsyncWebsocketConsumer
from .models import PrivateChatRoom, ChatMessage, Student, CV, Job, SkillinCV, ExperienceinCV, Project
from django.contrib.auth.models import User
from channels.db import database_sync_to_async
from . import nlp


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['room_id']
        self.room_group_name = f"chat_{self.room_id}"
        # Kh·ªüi t·∫°o dictionary l∆∞u tr·ªØ tr·∫°ng th√°i h·ªôi tho·∫°i cho m·ªói ng∆∞·ªùi d√πng
        self.conversation_states = {}

        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message = data['message']
        sender_id = data['sender_id']

        sender = await self.get_user(sender_id)
        room = await self.get_room(self.room_id)

        chat_message = await self.save_message(room, sender, message)

        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message,
                'sender': sender.username,
                'sender_id': sender.id,
                'created_at': str(chat_message.created_at),
                'is_superuser': sender.is_superuser,
            }
        )

        bot_username = "ChatBot_Assistant"
        if await self.is_chat_with_bot(room):
            bot_response = await self.generate_bot_response(message, sender.is_superuser, sender)
            bot_user = await self.get_user_by_username(bot_username)

            bot_message = await self.save_message(room, bot_user, bot_response)

            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'chat_message',
                    'message': bot_response,
                    'sender': bot_user.username,
                    'sender_id': bot_user.id,
                    'created_at': str(bot_message.created_at),
                    'is_superuser': False,
                }
            )

    async def chat_message(self, event):
        await self.send(text_data=json.dumps(event))

    @database_sync_to_async
    def get_user(self, user_id):
        return User.objects.get(id=user_id)

    @database_sync_to_async
    def get_user_by_username(self, username):
        return User.objects.get_or_create(username=username, defaults={"is_active": True})[0]

    @database_sync_to_async
    def get_room(self, room_id):
        return PrivateChatRoom.objects.get(id=room_id)

    @database_sync_to_async
    def save_message(self, room, sender, message):
        return ChatMessage.objects.create(room=room, sender=sender, message=message)

    @database_sync_to_async
    def is_chat_with_bot(self, room):
        bot_user = User.objects.filter(username="ChatBot_Assistant").first()
        return room.user1 == bot_user or room.user2 == bot_user

    @database_sync_to_async
    def lookup_student_info(self, student_code):
        student = Student.objects.filter(student_code=student_code).first()
        if not student:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y sinh vi√™n v·ªõi m√£: {student_code}"
        return (
            f"üéì **Th√¥ng tin sinh vi√™n:**\n\n"
            f"H·ªç t√™n: **{student.name}**\n"
            f"M√£ sinh vi√™n: **{student.student_code}**\n"
            f"Email: {student.email}\n"
            f"S·ªë ƒëi·ªán tho·∫°i: {student.phone}\n"
            f"NƒÉm h·ªçc: {student.study_year}\n"
            f"Ng√†nh: {student.department.name if student.department else 'Ch∆∞a c√≥'}"
        )
    
    @database_sync_to_async
    def get_cv_list(self, user):
        """Li·ªát k√™ t·∫•t c·∫£ CV c·ªßa ng∆∞·ªùi d√πng."""
        student = Student.objects.filter(user=user).first()
        if not student:
            return (
                "‚ùå B·∫°n ch∆∞a c√≥ CV n√†o.\n\n"
                "üí° B·∫°n c√≥ th·ªÉ t·∫°o CV m·ªõi b·∫±ng c√°ch:\n"
                "‚Ä¢ Nh·∫•n v√†o 'T·∫°o CV m·ªõi' trong m·ª•c Qu·∫£n l√Ω CV\n"
                "‚Ä¢ Ho·∫∑c truy c·∫≠p tr·ª±c ti·∫øp t·∫°i: http://127.0.0.1:8000/cv-form/"
            )

        cvs = CV.objects.filter(student=student)
        if not cvs:
            return (
                "‚ùå B·∫°n ch∆∞a c√≥ CV n√†o.\n\n"
                "üí° B·∫°n c√≥ th·ªÉ t·∫°o CV m·ªõi b·∫±ng c√°ch:\n"
                "‚Ä¢ Nh·∫•n v√†o 'T·∫°o CV m·ªõi' trong m·ª•c Qu·∫£n l√Ω CV\n"
                "‚Ä¢ Ho·∫∑c truy c·∫≠p tr·ª±c ti·∫øp t·∫°i: http://127.0.0.1:8000/cv-form/"
            )

        response = "üìÑ **DANH S√ÅCH CV C·ª¶A B·∫†N**\n\n"
        for cv in cvs:
            response += f"üîπ **{cv.name}** (ID: {cv.id})\n"
            response += f"   üîó <a href='http://127.0.0.1:8000/cv/{cv.id}/'>Xem chi ti·∫øt</a>\n"
            response += f"   üìÖ Ng√†y t·∫°o: {cv.create_date or 'Kh√¥ng c√≥'}\n\n"

        response += (
            "üí° **B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?**\n"
            "‚Ä¢ Xem chi ti·∫øt: g√µ 'Xem CV [id]'\n"
            "‚Ä¢ T√¨m vi·ªác ph√π h·ª£p: g√µ 'T√¨m vi·ªác cho CV [id]'\n"
            "‚Ä¢ X√≥a CV: g√µ 'X√≥a CV [id]'\n"
            "‚Ä¢ T·∫°o CV m·ªõi: truy c·∫≠p http://127.0.0.1:8000/cv-form/"
        )

        return response.strip()

    @database_sync_to_async
    def delete_cv(self, user, cv_id):
        """X√≥a CV theo ID."""
        student = Student.objects.filter(user=user).first()
        if not student:
            return "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a CV n√†y."

        try:
            cv_id = int(cv_id)
            cv = CV.objects.filter(id=cv_id, student=student).first()
            if not cv:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y CV v·ªõi ID: {cv_id}"

            cv_name = cv.name
            cv.delete()
            
            return (
                f"‚úÖ CV '{cv_name}' ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.\n\n"
                f"üí° B·∫°n c√≥ th·ªÉ:\n"
                f"‚Ä¢ Xem danh s√°ch CV c√≤n l·∫°i (g√µ 'CV c·ªßa t√¥i')\n"
                f"‚Ä¢ T·∫°o CV m·ªõi t·∫°i http://127.0.0.1:8000/cv-form/"
            )
        except ValueError:
            return "‚ùå ID CV kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë."

    @database_sync_to_async
    def get_cv_jobs(self, user, cv_id):
        """Tr·∫£ v·ªÅ danh s√°ch c√¥ng vi·ªác ph√π h·ª£p v·ªõi CV b·∫±ng NLP."""
        try:
            cv_id = int(cv_id)
            cv = CV.objects.filter(id=cv_id, student__user=user).first()
            if not cv:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y CV v·ªõi ID: {cv_id}"

            # L·∫•y d·ªØ li·ªáu t·ª´ CV
            cv_data = {
                "skills": [skill.skill.skill for skill in SkillinCV.objects.filter(cv=cv)],
                "experiences": [exp.experience.role for exp in ExperienceinCV.objects.filter(cv=cv)],
                "projects": [proj.project_name for proj in Project.objects.filter(cv=cv)],
            }

            # L·∫•y danh s√°ch c√¥ng vi·ªác t·ª´ database
            jobs = Job.objects.select_related("company", "industry", "hr").all()
            job_data = [
                {
                    "job_name": job.job_name,
                    "company": job.company.company_name if job.company else "N/A",
                    "industry": job.industry.industry_name if job.industry else "N/A",
                    "hr": job.hr.name if job.hr else "N/A",
                    "salary": job.salary,
                    "jd": job.jd,
                    "link_job": job.link_job
                }
                for job in jobs
            ]

            # G·ªçi NLP ƒë·ªÉ x·ª≠ l√Ω g·ª£i √Ω c√¥ng vi·ªác
            recommended_jobs = nlp.process_cv_to_jobs(cv_data, job_data).head(5)  # L·∫•y top 5 c√¥ng vi·ªác ph√π h·ª£p

            if recommended_jobs.empty:
                return (
                    f"‚ùå Kh√¥ng c√≥ c√¥ng vi·ªác n√†o ph√π h·ª£p v·ªõi CV '{cv.name}'.\n\n"
                    f"üí° B·∫°n c√≥ th·ªÉ:\n"
                    f"‚Ä¢ C·∫≠p nh·∫≠t CV v·ªõi nhi·ªÅu k·ªπ nƒÉng h∆°n\n"
                    f"‚Ä¢ Xem danh s√°ch t·∫•t c·∫£ vi·ªác l√†m t·∫°i: http://127.0.0.1:8000/jobs/"
                )

            # T·∫°o danh s√°ch c√¥ng vi·ªác tr·∫£ v·ªÅ chatbot
            response = f"üíº **C√¥ng vi·ªác ph√π h·ª£p v·ªõi CV '{cv.name}':**\n\n"
            for _, job in recommended_jobs.iterrows():
                response += f"üîπ **{job['job_name']}** t·∫°i **{job['company']}**\n"
                response += f"   üí∞ L∆∞∆°ng: {job['salary'] if job['salary'] else 'Th·ªèa thu·∫≠n'}\n"
                response += f"   üîó <a href='{job['link_job']}'>Xem chi ti·∫øt v√† ·ª©ng tuy·ªÉn</a>\n\n"

            response += (
                "üí° **B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?**\n"
                "‚Ä¢ Xem danh s√°ch vi·ªác l√†m kh√°c (truy c·∫≠p http://127.0.0.1:8000/jobs/)\n"
                "‚Ä¢ T√¨m vi·ªác cho CV kh√°c (g√µ 'CV c·ªßa t√¥i' v√† ch·ªçn CV kh√°c)\n"
                "‚Ä¢ C·∫≠p nh·∫≠t CV hi·ªán t·∫°i (truy c·∫≠p link CV ·ªü tr√™n)"
            )
            
            return response.strip()
        except ValueError:
            return "‚ùå ID CV kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë."

    @database_sync_to_async
    def get_cv_view_link(self, user, cv_id):
        """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn trang chi ti·∫øt c·ªßa CV."""
        try:
            cv_id = int(cv_id)
            cv = CV.objects.filter(id=cv_id, student__user=user).first()
            if not cv:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y CV v·ªõi ID: {cv_id}"

            return (
                f"üîó **CV: {cv.name}**\n\n"
                f"Xem chi ti·∫øt t·∫°i: <a href='http://127.0.0.1:8000/cv/{cv.id}/'>http://127.0.0.1:8000/cv/{cv.id}/</a>\n\n"
                f"üí° **B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?**\n"
                f"‚Ä¢ T√¨m vi·ªác ph√π h·ª£p cho CV n√†y (g√µ 'T√¨m vi·ªác cho CV {cv.id}')\n"
                f"‚Ä¢ C·∫≠p nh·∫≠t CV (truy c·∫≠p link CV b√™n tr√™n)\n"
                f"‚Ä¢ Xem c√°c CV kh√°c (g√µ 'CV c·ªßa t√¥i')"
            )
        except ValueError:
            return "‚ùå ID CV kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë."

    async def generate_bot_response(self, message, is_admin, user):
        """T·∫°o ph·∫£n h·ªìi cho tin nh·∫Øn ng∆∞·ªùi d√πng v·ªõi h·ªó tr·ª£ tr·∫°ng th√°i h·ªôi tho·∫°i."""
        user_id = user.id
        
        # Kh·ªüi t·∫°o tr·∫°ng th√°i h·ªôi tho·∫°i n·∫øu ch∆∞a c√≥
        if not hasattr(self, 'conversation_states'):
            self.conversation_states = {}
            
        if user_id not in self.conversation_states:
            self.conversation_states[user_id] = {'state': 'idle', 'context': {}}
            
        state = self.conversation_states[user_id]['state']
        context = self.conversation_states[user_id]['context']
        
        # X·ª≠ l√Ω c√°c l·ªánh ƒë·ªÉ h·ªßy tr·∫°ng th√°i hi·ªán t·∫°i
        if message.lower() in ['h·ªßy', 'cancel', 'quay l·∫°i', 'tho√°t']:
            self.conversation_states[user_id] = {'state': 'idle', 'context': {}}
            return "‚úÖ ƒê√£ h·ªßy thao t√°c hi·ªán t·∫°i. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ th√™m kh√¥ng? G√µ 'menu' ƒë·ªÉ xem c√°c l·ª±a ch·ªçn."
            
        # X·ª≠ l√Ω tr·∫°ng th√°i h·ªôi tho·∫°i
        if state == 'awaiting_cv_id':
            action = context.get('action')
            try:
                cv_id = message.strip()
                
                if action == 'view':
                    self.conversation_states[user_id] = {'state': 'idle', 'context': {}}
                    return await self.get_cv_view_link(user, cv_id)
                elif action == 'delete':
                    self.conversation_states[user_id] = {'state': 'idle', 'context': {}}
                    return await self.delete_cv(user, cv_id)
                elif action == 'jobs':
                    self.conversation_states[user_id] = {'state': 'idle', 'context': {}}
                    return await self.get_cv_jobs(user, cv_id)
                    
            except Exception as e:
                return (
                    f"‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID CV h·ª£p l·ªá (m·ªôt s·ªë).\n"
                    f"Ho·∫∑c g√µ 'h·ªßy' ƒë·ªÉ quay l·∫°i menu ch√≠nh."
                )
                
        # X·ª≠ l√Ω l·ªánh admin
        if message.startswith("/admin") or message.lower().startswith("admin"):
            if not is_admin:
                return "‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!"

            command_parts = message.split()
            if len(command_parts) == 1:
                return (
                    "‚ö†Ô∏è Vui l√≤ng nh·∫≠p l·ªánh sau /admin. V√≠ d·ª•:\n"
                    "‚Ä¢ '/admin status' - Ki·ªÉm tra tr·∫°ng th√°i bot\n"
                    "‚Ä¢ '/admin lookup [m√£ sinh vi√™n]' - Tra c·ª©u th√¥ng tin sinh vi√™n"
                )

            command = command_parts[1].lower()
            if command == "status":
                return "‚úÖ Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."

            elif command == "lookup":
                if len(command_parts) != 3:
                    return "‚ö†Ô∏è L·ªánh kh√¥ng ƒë√∫ng. S·ª≠ d·ª•ng: `/admin lookup [m√£ sinh vi√™n]`."
                student_code = command_parts[2]
                return await self.lookup_student_info(student_code)

            else:
                return (
                    f"‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªánh: '{command}'\n"
                    f"C√°c l·ªánh admin c√≥ s·∫µn:\n"
                    f"‚Ä¢ 'admin status' - Ki·ªÉm tra tr·∫°ng th√°i\n"
                    f"‚Ä¢ 'admin lookup [m√£ sinh vi√™n]' - Tra c·ª©u sinh vi√™n"
                )
            
        # X·ª≠ l√Ω c√°c bi·∫øn th·ªÉ c√¢u l·ªánh xem danh s√°ch CV
        cv_list_patterns = ['/cv', 'cv c·ªßa t√¥i', 'xem cv', 'danh s√°ch cv', 'cv', 'h·ªì s∆°', 'h·ªì s∆° c·ªßa t√¥i']
        if message.lower() in cv_list_patterns or any(message.lower().startswith(p) for p in cv_list_patterns):
            if message.lower().strip() == "/cv" or message.lower() in cv_list_patterns:
                return await self.get_cv_list(user)
                
        # X·ª≠ l√Ω l·ªánh xem chi ti·∫øt CV
        view_cv_patterns = ['xem cv', 'xem h·ªì s∆°', 'chi ti·∫øt cv', 'view cv', 'm·ªü cv']
        if any(message.lower().startswith(pattern) for pattern in view_cv_patterns):
            parts = message.lower().split()
            if len(parts) >= 2 and parts[-1].isdigit():
                return await self.get_cv_view_link(user, parts[-1])
            else:
                self.conversation_states[user_id] = {'state': 'awaiting_cv_id', 'context': {'action': 'view'}}
                return (
                    "üîç Vui l√≤ng nh·∫≠p ID c·ªßa CV b·∫°n mu·ªën xem:\n"
                    "(ID l√† s·ªë hi·ªÉn th·ªã b√™n c·∫°nh t√™n CV. G√µ 'h·ªßy' ƒë·ªÉ quay l·∫°i.)"
                )
                
        # X·ª≠ l√Ω l·ªánh x√≥a CV
        delete_cv_patterns = ['x√≥a cv', 'delete cv', 'h·ªßy cv', 'lo·∫°i b·ªè cv', 'xoa cv']
        if any(message.lower().startswith(pattern) for pattern in delete_cv_patterns):
            parts = message.lower().split()
            if len(parts) >= 2 and parts[-1].isdigit():
                return await self.delete_cv(user, parts[-1])
            else:
                self.conversation_states[user_id] = {'state': 'awaiting_cv_id', 'context': {'action': 'delete'}}
                return (
                    "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID c·ªßa CV b·∫°n mu·ªën x√≥a:\n"
                    "(ID l√† s·ªë hi·ªÉn th·ªã b√™n c·∫°nh t√™n CV. G√µ 'h·ªßy' ƒë·ªÉ quay l·∫°i.)"
                )
                
        # X·ª≠ l√Ω l·ªánh t√¨m vi·ªác ph√π h·ª£p v·ªõi CV
        job_for_cv_patterns = ['t√¨m vi·ªác', 'vi·ªác l√†m ph√π h·ª£p', 'g·ª£i √Ω vi·ªác', 'cv jobs', 
                               't√¨m vi·ªác cho cv', 'vi·ªác ph√π h·ª£p', 'c√¥ng vi·ªác ph√π h·ª£p']
        if any(message.lower().startswith(pattern) for pattern in job_for_cv_patterns):
            parts = message.lower().split()
            # T√¨m s·ªë cu·ªëi c√πng trong tin nh·∫Øn (c√≥ th·ªÉ l√† ID CV)
            cv_id = None
            for part in reversed(parts):
                if part.isdigit():
                    cv_id = part
                    break
                    
            if cv_id:
                return await self.get_cv_jobs(user, cv_id)
            else:
                self.conversation_states[user_id] = {'state': 'awaiting_cv_id', 'context': {'action': 'jobs'}}
                return (
                    "üíº Vui l√≤ng nh·∫≠p ID c·ªßa CV b·∫°n mu·ªën t√¨m vi·ªác ph√π h·ª£p:\n"
                    "(ID l√† s·ªë hi·ªÉn th·ªã b√™n c·∫°nh t√™n CV. G√µ 'h·ªßy' ƒë·ªÉ quay l·∫°i.)"
                )
                
        # X·ª≠ l√Ω l·ªánh help/menu
        if message.lower() in ['help', 'tr·ª£ gi√∫p', 'h∆∞·ªõng d·∫´n', 'menu']:
            return (
                "ü§ñ **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG INFOBOT**\n\n"
                "**üìÑ Qu·∫£n l√Ω CV**\n"
                "‚Ä¢ Xem danh s√°ch CV: g√µ 'CV c·ªßa t√¥i'\n"
                "‚Ä¢ Xem chi ti·∫øt CV: g√µ 'Xem CV [ID]'\n"
                "‚Ä¢ X√≥a CV: g√µ 'X√≥a CV [ID]'\n"
                "‚Ä¢ T√¨m vi·ªác ph√π h·ª£p: g√µ 'T√¨m vi·ªác cho CV [ID]'\n\n"
                
                "**üí¨ C√°c l·ªánh kh√°c**\n"
                "‚Ä¢ Tr·ª£ gi√∫p/Menu: g√µ 'help' ho·∫∑c 'menu'\n"
                "‚Ä¢ H·ªßy thao t√°c hi·ªán t·∫°i: g√µ 'h·ªßy' ho·∫∑c 'cancel'\n"
                "‚Ä¢ Chuy·ªÉn sang CareerGemini: g√µ 'd√πng CareerGemini'\n\n"
                
                "**üõ†Ô∏è D√†nh cho Admin**\n"
                "‚Ä¢ Ki·ªÉm tra tr·∫°ng th√°i: g√µ 'admin status'\n"
                "‚Ä¢ Tra c·ª©u sinh vi√™n: g√µ 'admin lookup [m√£ sinh vi√™n]'\n\n"
                
                "**üìù L∆∞u √Ω:**\n"
                "‚Ä¢ InfoBot b·∫£o m·∫≠t th√¥ng tin c√° nh√¢n c·ªßa b·∫°n\n"
                "‚Ä¢ C√≥ th·ªÉ d√πng Ti·∫øng Vi·ªát kh√¥ng d·∫•u ho·∫∑c c√≥ d·∫•u\n"
                "‚Ä¢ Th√¥ng tin quan tr·ªçng s·∫Ω kh√¥ng ƒë∆∞·ª£c chia s·∫ª v·ªõi h·ªá th·ªëng b√™n ngo√†i"
            )
            
        # X·ª≠ l√Ω chuy·ªÉn sang CareerGemini
        if any(message.lower().startswith(p) for p in ['d√πng careergemini', 's·ª≠ d·ª•ng careergemini', 
                                                       'chuy·ªÉn sang careergemini', 'dung careergemini']):
            return (
                "üîÑ ƒê·ªÉ chuy·ªÉn sang s·ª≠ d·ª•ng CareerGemini (tr·ª£ l√Ω AI n√¢ng cao):\n\n"
                "1. Nh·∫•n v√†o n√∫t 'CareerGemini' tr√™n thanh c√¥ng c·ª•\n"
                "2. Ho·∫∑c truy c·∫≠p: http://127.0.0.1:8000/chatbotgemini/\n\n"
                "‚ö†Ô∏è **L∆∞u √Ω:** CareerGemini s·ª≠ d·ª•ng AI c·ªßa Google Gemini v√† s·∫Ω ti·∫øp c·∫≠n c√°c th√¥ng tin ƒë∆∞·ª£c chia s·∫ª. "
                "Kh√¥ng chia s·∫ª th√¥ng tin nh·∫°y c·∫£m v·ªõi CareerGemini."
            )
            
        # X·ª≠ l√Ω c√¢u ch√†o v√† c√°c tin nh·∫Øn th√¥ng th∆∞·ªùng
        greetings = ['xin ch√†o', 'hello', 'hi', 'ch√†o', 'hey', 'alo', 'chao']
        if message.lower() in greetings or any(message.lower().startswith(g) for g in greetings):
            student_name = ""
            student = await database_sync_to_async(lambda: Student.objects.filter(user=user).first())()
            if student:
                student_name = student.name
                
            return (
                f"üëã Ch√†o {student_name or user.username}!\n\n"
                f"T√¥i l√† InfoBot, tr·ª£ l√Ω th√¥ng tin b·∫£o m·∫≠t c·ªßa E-commerce Portal. "
                f"T√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω CV v√† th√¥ng tin c√° nh√¢n m·ªôt c√°ch an to√†n.\n\n"
                f"B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? G√µ 'menu' ƒë·ªÉ xem c√°c t√πy ch·ªçn."
            )
            
        # X·ª≠ l√Ω c√¢u c·∫£m ∆°n
        thank_patterns = ['c·∫£m ∆°n', 'thank', 'c√°m ∆°n', 'thanks', 'cam on']
        if message.lower() in thank_patterns or any(message.lower().startswith(t) for t in thank_patterns):
            return (
                "üôÇ Kh√¥ng c√≥ g√¨! R·∫•t vui khi ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n.\n"
                "N·∫øu c·∫ßn th√™m th√¥ng tin, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©!"
            )
        
        # C√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh cho nh·ªØng tin nh·∫Øn kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c
        return (
            f"ü§ñ T√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ:\n\n"
            f"‚Ä¢ G√µ 'menu' ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ª±a ch·ªçn\n"
            f"‚Ä¢ G√µ 'CV c·ªßa t√¥i' ƒë·ªÉ xem danh s√°ch CV\n"
            f"‚Ä¢ G√µ 'help' ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p\n"
        )